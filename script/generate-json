#!/usr/bin/env ruby

require 'json'
require 'csv'
require 'pp'

# Translate old teams to their modern representation
TEAMS = {
  NOK: 'NOP',
  SEA: 'OKC',
  NOJ: 'UTA',
  BAL: 'WAS',
  CHP: 'WAS',
  CHZ: 'WAS',
  WSB: 'WAS',
  CAP: 'WAS',
  BUF: 'LAC',
  SDC: 'LAC',
  MLH: 'ATL',
  STL: 'ATL',
  TRI: 'ATL',
  VAN: 'MEM',
  ROC: 'SAC',
  KCK: 'SAC',
  KCO: 'SAC',
  CIN: 'SAC',
  SDR: 'HOU',
  CHO: 'CHA',
  CHH: 'CHA',
  PHW: 'GSW',
  SFW: 'GSW',
  SYR: 'PHI',
  MNL: 'LAL',
  FTW: 'DET',
  NYN: 'BKN',
  NJN: 'BKN',
  BRK: 'BKN',
  NOH: 'NOP',
  PHO: 'PHX'
}

# Teams that are no longer around
DEFUNCT = ['SHE', 'WAT', 'STB', 'WSC', 'AND', 'DNN', 'CHS', 'BLB', 'INO']

rows = CSV.read("coaches.csv",
  headers: true,
  header_converters: :symbol,
  converters: :numeric)

rows.each do |r|
  abbr = r[:team].to_sym
  r[:team] = TEAMS.has_key?(abbr) ? TEAMS[abbr] : abbr.to_s
end

rows.each do |row|
  row[:start] = row[:season].split('-').first.to_i
  row[:finish] = row[:start] + 1
end

rows = rows.select do |t|
  !DEFUNCT.include?(t[:team]) && t[:start] >= 1990
end

teams = rows.select { |r| r[:team] == 'POR' }
teams = teams.group_by {|r| r[:team] }

# Group coaches by tenures
teams = teams.map do |name, coaches|
  coaches.map!(&:to_h).sort_by! { |c| [c[:name], c[:season]] }

  coaching_stints = coaches.each_with_object([]) do |coach, stints|
    last_stint = stints.last
    if [coach[:name], coach[:start]] == last_stint&.fetch_values(:coach, :finish)
      last_stint[:finish] = coach[:finish]
      last_stint[:years].push(coach.delete_if {|c| [:name, :team].include?(c)})
    else

      stints << {
        coach: coach[:name],
        start: coach[:start],
        finish: coach[:finish],
        team: coach[:team],
        eos: 0,
        sos: 0,
        years: [coach.delete_if {|c| [:name, :team].include?(c)}]
      }
    end
  end
  [name, coaching_stints.sort_by { |c| [c[:start], c[:finish]] }]
end

# We need to do some extra work for seasons that lists two coaches.  This usually
# happens when a coach is fired midseason.  We want to get the percentage of games
# at the beginning and ending of the first and final seasons respectively for each
# coach that we can combine with the year later when visualizing this information.
teams.each do |team, coaches|
  # Sometimes the number of games sums to something lower than 82.  This might
  # happen when an temporary interm coach is coaching during the season, but they
  # never are appointed _head_ coach.
  #
  # We wan to divide by this number later so we can get the percentage of a season
  # a specific coach coached.  In cases where this is less than 82, we're comfortable
  # ignoring the interm coaching games
  season_games = coaches.map { |c| c[:years].map {|y| Hash[y[:season], y[:games]] }}.flatten
  season_games = season_games.inject { |memo, el| memo.merge( el ) { |k, old_v, new_v| old_v + new_v } }
  coaches.each do |coach|
    first_year = coach[:years].first
    last_year  = coach[:years].last
    first_season_games = season_games[first_year[:season]].to_f
    last_season_games  = season_games[last_year[:season]].to_f

    if first_year[:games] < first_season_games && first_year[:season] != '1998-99'
      coach[:sos] = (first_year[:games] / first_season_games).round(4)
    end

    if last_year[:games] < last_season_games && last_year[:season] != '1998-99' && coach[:years].length > 1
      coach[:eos] = -((last_year[:games]) / last_season_games).round(4)
    end
  end
end

puts JSON.pretty_generate(teams)
